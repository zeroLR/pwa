{"version":3,"sources":["router/pages/Home.js","router/pages/DashBoard.js","components/Test/TestDeviceConnect.js","router/pages/Test.js","router/router.js","components/MenuBar/LeftMenu.js","components/MenuBar/RightMenu.js","components/MenuBar/MenuDrawer.js","components/MenuBar/Navbar.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Home","DashBoard","TestDeviceConnect","useState","ws","setWs","useEffect","console","log","on","message","window","location","hostname","port","webSocket","Test","webRouter","exact","path","component","LeftMenu","mode","Item","href","HomeOutlined","DashboardOutlined","BugOutlined","Component","RightMenu","SubMenu","Menu","MenuDrawer","title","Navbar","state","current","visible","showDrawer","setState","onClose","className","type","onClick","this","placement","closable","App","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.15603e78.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst Home = () => {\n  return (\n    <Fragment>\n      <h1>The Home page</h1>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, { Fragment } from \"react\";\n\nconst DashBoard = () => {\n  return (\n    <Fragment>\n      <h1>The DashBoard page</h1>\n    </Fragment>\n  );\n};\n\nexport default DashBoard;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport webSocket from \"socket.io-client\";\nimport \"antd/dist/antd.css\";\n\nconst TestDeviceConnect = () => {\n  const [ws, setWs] = useState(null);\n  const connectWebSocket = () => {\n    console.log(\n      `host:${window.location.hostname} port:${window.location.port}`\n    );\n    setWs(webSocket(`ws://192.168.0.200:10000`));\n  };\n\n  const initWebSocket = () => {\n    ws.on(\"192.168.0.101\", (message) => {\n      console.log(`${message}`);\n    });\n    ws.on(\"192.168.0.102\", (message) => {\n      console.log(message);\n    });\n    ws.on(\"192.168.0.103\", (message) => {\n      console.log(message);\n    });\n  };\n\n  useEffect(() => {\n    if (ws) {\n      console.log(\"create websocket\");\n      console.log(ws);\n      initWebSocket();\n    }\n  }, [ws]);\n\n  useEffect(() => {\n    connectWebSocket();\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>check console</h1>\n    </Fragment>\n  );\n};\n\nexport default TestDeviceConnect;\n","import React, { Fragment } from \"react\";\nimport TestWs from \"../../components/Test/TestDeviceConnect\";\n\nconst Test = () => {\n  return (\n    <Fragment>\n      <h1>The Test page</h1>\n      <TestWs />\n    </Fragment>\n  );\n};\n\nexport default Test;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport DashBoard from \"./pages/DashBoard\";\nimport Test from \"./pages/Test\";\n\nexport default function webRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/dashboard\" component={DashBoard} />\n        <Route exact path=\"/test\" component={Test} />\n        <Route component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Menu } from \"antd\";\nimport {\n  HomeOutlined,\n  DashboardOutlined,\n  BugOutlined,\n} from \"@ant-design/icons\";\n\nclass LeftMenu extends Component {\n  render() {\n    return (\n      <Menu mode=\"horizontal\">\n        <Menu.Item key=\"home\">\n          <a href=\"home\">\n            <HomeOutlined />\n            Home\n          </a>\n        </Menu.Item>\n        <Menu.Item key=\"dashboard\">\n          <a href=\"dashboard\">\n            <DashboardOutlined />\n            Dashboard\n          </a>\n        </Menu.Item>\n        <Menu.Item key=\"test\">\n          <a href=\"test\">\n            <BugOutlined />\n            TestPage\n          </a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\nexport default LeftMenu;\n","import React, { Component } from \"react\";\nimport { Menu } from \"antd\";\n\nclass RightMenu extends Component {\n  render() {\n    return (\n      <Menu mode=\"horizontal\">\n        <Menu.Item key=\"mail\">\n          <a href=\"Signin\">Signin</a>\n        </Menu.Item>\n        <Menu.Item key=\"app\">\n          <a href=\"Signup\">Signup</a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\nexport default RightMenu;\n","import React, { Component } from \"react\";\nimport { Menu } from \"antd\";\nimport {\n  HomeOutlined,\n  DashboardOutlined,\n  BugOutlined,\n} from \"@ant-design/icons\";\nconst SubMenu = Menu.SubMenu;\n\nclass MenuDrawer extends Component {\n  render() {\n    return (\n      <Menu mode=\"inline\">\n        <SubMenu title={<span>Menu</span>}>\n          <Menu.Item>\n            <a href=\"home\">\n              <HomeOutlined />\n              Home\n            </a>\n          </Menu.Item>\n          <Menu.Item>\n            <a href=\"dashboard\">\n              <DashboardOutlined />\n              Dashboard\n            </a>\n          </Menu.Item>\n          <Menu.Item>\n            <a href=\"test\">\n              <BugOutlined />\n              TestPage\n            </a>\n          </Menu.Item>\n        </SubMenu>\n        <SubMenu title={<span>Sign</span>}>\n          <Menu.Item>\n            <a href=\"signin\">Signin</a>\n          </Menu.Item>\n          <Menu.Item>\n            <a href=\"signup\">Signup</a>\n          </Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\nexport default MenuDrawer;\n","import React, { Component } from \"react\";\nimport LeftMenu from \"./LeftMenu\";\nimport RightMenu from \"./RightMenu\";\nimport { Drawer, Button } from \"antd\";\nimport MenuDrawer from \"./MenuDrawer\";\nclass Navbar extends Component {\n  state = {\n    current: \"mail\",\n    visible: false,\n  };\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n  render() {\n    return (\n      <nav className=\"menuBar\">\n        <div className=\"logo\">\n          <a href=\"Home\">CMSG IOT</a>\n        </div>\n        <div className=\"menuCon\">\n          <div className=\"leftMenu\">\n            <LeftMenu />\n          </div>\n          <div className=\"rightMenu\">\n            <RightMenu />\n          </div>\n          <Button className=\"barsMenu\" type=\"primary\" onClick={this.showDrawer}>\n            <span className=\"barsBtn\"></span>\n          </Button>\n          <Drawer\n            title=\"Menu\"\n            placement=\"right\"\n            closable={false}\n            onClose={this.onClose}\n            visible={this.state.visible}\n          >\n            <MenuDrawer />\n          </Drawer>\n        </div>\n      </nav>\n    );\n  }\n}\nexport default Navbar;\n","import { Fragment } from \"react\";\nimport { Online, Offline } from \"react-detect-offline\";\nimport \"./App.css\";\n\nimport Router from \"./router/router\";\nimport Menu from \"./components/MenuBar/Navbar\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <Menu />\n        <Router />\n        <Online>\n          <h1>網路狀態：連線中</h1>\n        </Online>\n        <Offline>\n          <h1>網路狀態：離線</h1>\n        </Offline>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}